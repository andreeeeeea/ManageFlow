@page "/add-task"
@using ManageFlow.Data.Models
@using ManageFlow.Services
@inject ITaskManagerService TaskService
@rendermode InteractiveServer

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}
@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success" role="alert">
        @successMessage
    </div>
}

<h3> Add New Task</h3>

<EditForm Model="@task" OnValidSubmit="@SubmitTask">
    <DataAnnotationsValidator />

    <div class="mb-3">
        <label for="title"> Title</label>
        <InputText id="title" @bind-Value="task.Title" class="form-control" />
    </div>

    <div class="mb-3">
        <label for="=description"> Description</label>
        <InputText id="description" @bind-Value="task.Description" class="form-control" />
    </div>

    <div class="mb-3">
        <label for="deadline"> Deadline</label>
        <InputDate id="deadline" @bind-Value="task.Deadline" class="form-control" />
    </div>

   <div class="mb-3">
        <label>Assign Employees</label>
        @if (employees == null)
        {
            <p>Loading employees...</p>
        }
        else if (!employees.Any())
        {
            <p>No employees found</p>
        }
        else
        {
            <div class="list-group">
                @foreach (var employee in employees)
                {
                    <div class="form-check">
                        <input type="checkbox" 
                            class="form-check-input" 
                            id="emp_@employee.Id"
                            @onchange="@(e => ToggleEmployee(employee.Id, (bool)e.Value))" />
                        <label class="form-check-label" for="emp_@employee.Id">
                            @employee.FirstName @employee.LastName - @employee.Department
                        </label>
                    </div>
                }
            </div>
        }
    </div>
    <button type="submit" class="btn btn-primary">Add Task</button>
</EditForm>

@code {
    private Tasks task = new() { Status = "Just Started" };
    private List<Employees> employees = new();
    private List<int> selectedEmployeeIds = new();
    private string? errorMessage;
    private string? successMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            employees = await TaskService.GetEmployeesAsync();
            Console.WriteLine($"Loaded {employees.Count} employees");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            Console.WriteLine($"Error loading employees: {ex.Message}");
        }
    }

    private void ToggleEmployee(int employeeId, bool isSelected)
    {
        if (isSelected)
        {
            selectedEmployeeIds.Add(employeeId);
        }
        else 
        {
            selectedEmployeeIds.Remove(employeeId);
        }
        Console.WriteLine($"Selected employees: {string.Join(", ", selectedEmployeeIds)}");
    }
    
    private async Task SubmitTask()
    {
        try
        {
            var newTask = await TaskService.CreateTaskAsync(task);
            if (newTask != null)
            {
                await TaskService.AssignEmployeesToTaskAsync(newTask.Id, selectedEmployeeIds);
                
                Console.WriteLine($"Created task '{newTask.Title}' with {newTask.Id} id");
                Console.WriteLine($"Assigned task to employees: {string.Join(", ", selectedEmployeeIds)}");

                task = new() { Status = "Just Started" };
                selectedEmployeeIds.Clear();
                successMessage = "Task created successfully!";
            }
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
            Console.WriteLine($"Error creating task: {e.Message}");
        }
    }
}