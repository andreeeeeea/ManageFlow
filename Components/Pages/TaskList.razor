@page "/tasks"
@using EmployeeManager.Data.Models
@using static Supabase.Postgrest.Constants
@inject Supabase.Client Supabase
@rendermode InteractiveServer

<h3>Tasks</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@if (tasks == null)
{
    <p>Loading...</p>
}
else if (!tasks.Any())
{
    <p>No tasks found.</p>
}
else
{
    <div class="table-responsive">
        <table class="table">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Description</th>
                    <th>Status</th>
                    <th>Deadline</th>
                    <th>Assigned Employees</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var task in tasks)
                {
                    <tr>
                        <td>@task.Title</td>
                        <td>@task.Description</td>
                        <td>@task.Status</td>
                        <td>@(task.Deadline?.ToShortDateString() ?? "No deadline")</td>
                        <td>
                            @if (taskAssignments.ContainsKey(task.Id))
                            {
                                @string.Join(", ", taskAssignments[task.Id].Select(e => $"{e.FirstName} {e.LastName}"))
                            }
                            else
                            {
                                <span>No assignments</span>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<Tasks>? tasks;
    private Dictionary<int, List<Employees>> taskAssignments = new();
    private string? errorMessage;
    protected override async Task OnInitializedAsync(){
        try{
            var tasksResponse = await Supabase
                .From<Tasks>()
                .Get();
            tasks = tasksResponse.Models;

            if (tasks != null && tasks.Any()){
                var taskIds = tasks.Select(t => t.Id).ToList();
                var assignments = await Supabase.From<TaskAssignments>().Filter("task_id", Operator.In, taskIds).Get();

                if (assignments?.Models != null){
                    var employeeIds = assignments.Models.Select(a => a.EmployeeId).Distinct().ToList();
                    var employees = await Supabase.From<Employees>().Filter("id", Operator.In, employeeIds).Get();

                    if (employees?.Models != null){
                        var employeeDict = employees.Models.ToDictionary(e => e.Id);
                        foreach (var assignment in assignments.Models){
                            if (!taskAssignments.ContainsKey(assignment.TaskId))
                            {
                                taskAssignments[assignment.TaskId] = new List<Employees>();
                            }

                            if (employeeDict.ContainsKey(assignment.EmployeeId))
                            {
                                taskAssignments[assignment.TaskId].Add(employeeDict[assignment.EmployeeId]);
                            }
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            Console.WriteLine($"Error loading tasks: {ex.Message}");
        }
    }
}