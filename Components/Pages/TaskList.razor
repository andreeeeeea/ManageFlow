@page "/tasks"
@using ManageFlow.Data.Models
@using ManageFlow.Services
@using ManageFlow.Components.Forms
@inject ITaskManagerService TaskService
@inject IEmployeeService EmployeeService
@inject IJSRuntime JS
@rendermode InteractiveServer

<h3>Tasks</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}
@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success" role="alert">
        @successMessage
    </div>
}

@if (showEditTaskForm)
{
    <EditTaskForm TaskId="@selectedTaskId" OnClose="@(() => showEditTaskForm = false)" />
}

@if (tasks == null)
{
    <p>Loading...</p>
}
else if (!tasks.Any())
{
    <p>No tasks found.</p>
}
else
{
    <div class="table-responsive">
        <table class="table">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Description</th>
                    <th>Status</th>
                    <th>Deadline</th>
                    <th>Assigned Employees</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var task in tasks)
                {
                    <tr>
                        <td>@task.Title</td>
                        <td>@task.Description</td>
                        <td>@task.Status</td>
                        <td>@(task.Deadline?.ToShortDateString() ?? "No deadline")</td>
                        <td>
                            @if (taskAssignments.ContainsKey(task.Id))
                            {
                                @string.Join(", ", taskAssignments[task.Id].Select(e => $"{e.FirstName} {e.LastName}"))
                            }
                            else
                            {
                                <span>No assignments</span>
                            }
                        </td>
                        <button class="btn btn-primary" @onclick="() => ShowEditTaskForm(task.Id)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteTask(task.Id)">Delete</button>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<Tasks>? tasks;
    private List<Employees> employees = new();
    private List<int> selectedEmployeeIds = new();
    private Dictionary<int, List<Employees>> taskAssignments = new();
    private string? errorMessage, successMessage;
    private bool showEditTaskForm = false;
    private int selectedTaskId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            tasks = await TaskService.GetTasksAsync();
            taskAssignments.Clear();

            if (tasks != null && tasks.Any())
            {
                foreach (var task in tasks)
                {
                    var assignments = await TaskService.GetTaskAssignmentsAsync(task.Id);
                    if (assignments?.Any() == true)
                    {
                        var employeeIds = assignments.Select(a => a.EmployeeId).ToList();
                        var assignedEmployees = (await EmployeeService.GetEmployeesAsync())
                            .Where(e => employeeIds.Contains(e.Id))
                            .ToList();
                        
                        taskAssignments[task.Id] = assignedEmployees;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            Console.WriteLine($"Error loading tasks: {ex.Message}");
        }
    }

    private async Task DeleteTask(int taskId)
    {
        try 
        {
            await TaskService.DeleteTaskAsync(taskId);
            await OnInitializedAsync();
            StateHasChanged();
            successMessage = "Task deleted successfully!";
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            Console.WriteLine($"Error deleting task: {ex.Message}");
        }
    }

    private void ToggleEmployee(int employeeId)
    {
        if (selectedEmployeeIds.Contains(employeeId))
            selectedEmployeeIds.Remove(employeeId);
        else
            selectedEmployeeIds.Add(employeeId);
    }

    private void ShowEditTaskForm(int taskId)
    {
        selectedTaskId = taskId;
        showEditTaskForm = true;
        StateHasChanged();
    }
}