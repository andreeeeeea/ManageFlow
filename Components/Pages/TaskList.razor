@page "/tasks"
@using ManageFlow.Data.Models
@using ManageFlow.Services
@using ManageFlow.Components.Forms
@using ManageFlow.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@inject ITaskManagerService TaskService
@inject IEmployeeService EmployeeService
@inject IJSRuntime JS
@inject UserManager<ApplicationUser> UserManager
@rendermode InteractiveServer

<div class="page-header mb-4">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h2 class="page-title">ðŸ“‹ Task Management</h2>
            <p class="text-muted">Track and manage all your tasks in one place</p>
        </div>
        @if (isManager)
        {
            <button class="btn btn-primary" @onclick="ShowAddTaskForm">
                <i class="bi bi-plus-circle"></i> Add New Task
            </button>
        }
    </div>
    <div class=" w-auto d-flex gap-2 flex-wrap p-2 bg-white rounded-3 border shadow-sm">
        <button class="btn @(statusFilter == "all" ? "btn-primary" : "btn-outline-secondary") btn-sm" @onclick='() => SetStatusFilter("all")'>
            All
        </button>
        <button class="btn @(statusFilter == "Not Started" ? "btn-primary" : "btn-outline-secondary") btn-sm" @onclick='() => SetStatusFilter("Not Started")'>
            Not Started
        </button>
        <button class="btn @(statusFilter == "Just Started" ? "btn-primary" : "btn-outline-secondary") btn-sm" @onclick='() => SetStatusFilter("Just Started")'>
            Just Started
        </button>
        <button class="btn @(statusFilter == "In Progress" ? "btn-primary" : "btn-outline-secondary") btn-sm" @onclick='() => SetStatusFilter("In Progress")'>
            In Progress
        </button>
        <button class="btn @(statusFilter == "Completed" ? "btn-primary" : "btn-outline-secondary") btn-sm" @onclick='() => SetStatusFilter("Completed")'>
            Completed
        </button>
    </div>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}
@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success" role="alert">
        @successMessage
    </div>
}

@if (showAddTaskForm)
{
    <AddTaskForm OnClose="@(() => showAddTaskForm = false)" />
}

@if (showEditTaskForm)
{
    <EditTaskForm TaskId="@selectedTaskId" OnClose="@HandleEditFormClose" />
}

@if (tasks == null)
{
    <div class="text-center py-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2">Loading tasks...</p>
    </div>
}
else if (!tasks.Any())
{
    <div class="empty-state text-center py-5">
        <h4>No tasks found</h4>
        <p class="text-muted">Start by creating your first task</p>
    </div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Description</th>
                    <th>Status</th>
                    <th>Deadline</th>
                    <th>Assigned Employees</th>
                    <th class="text-end">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var task in tasks)
                {
                    <tr>
                        <td>@task.Title</td>
                        <td>@task.Description</td>
                        <td>@task.Status</td>
                        <td>@(task.Deadline?.ToShortDateString() ?? "No deadline")</td>
                        <td>
                            @if (taskAssignments.ContainsKey(task.Id))
                            {
                                @string.Join(", ", taskAssignments[task.Id].Select(e => $"{e.FirstName} {e.LastName}"))
                            }
                            else
                            {
                                <span>No assignments</span>
                            }
                        </td>
                        <td class="text-end">
                            @if (isManager)
                            {
                                <button class="btn btn-sm btn-primary me-2" @onclick="() => ShowEditTaskForm(task.Id)">
                                    <i class="bi bi-pencil"></i> Edit
                                </button>
                                <button class="btn btn-sm btn-danger" @onclick="() => DeleteTask(task.Id)">
                                    <i class="bi bi-trash"></i> Delete
                                </button>
                            }
                            else
                            {
                                <span class="text-muted">View only</span>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<Tasks>? tasks;
    private List<Tasks>? allTasks;
    private List<Employees> employees = new();
    private List<int> selectedEmployeeIds = new();
    private Dictionary<int, List<Employees>> taskAssignments = new();
    private string? errorMessage, successMessage;
    private bool showAddTaskForm = false;
    private bool showEditTaskForm = false;
    private int selectedTaskId;
    private bool isManager = false;
    private string statusFilter = "all";

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (authenticationState != null)
            {
                var authState = await authenticationState;
                var user = await UserManager.GetUserAsync(authState.User);
                isManager = user?.Role == "Manager";
            }

            allTasks = await TaskService.GetTasksAsync();
            tasks = allTasks;
            taskAssignments.Clear();

            if (tasks != null && tasks.Any())
            {
                foreach (var task in tasks)
                {
                    var assignments = await TaskService.GetTaskAssignmentsAsync(task.Id);
                    if (assignments?.Any() == true)
                    {
                        var employeeIds = assignments.Select(a => a.EmployeeId).ToList();
                        var assignedEmployees = (await EmployeeService.GetEmployeesAsync())
                            .Where(e => employeeIds.Contains(e.Id))
                            .ToList();

                        taskAssignments[task.Id] = assignedEmployees;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            Console.WriteLine($"Error loading tasks: {ex.Message}");
        }
    }

    private void SetStatusFilter(string status)
    {
        statusFilter = status;

        if (status == "all")
        {
            tasks = allTasks;
        }
        else
        {
            tasks = allTasks?.Where(t => t.Status == status).ToList();
        }

        StateHasChanged();
    }

    private async Task DeleteTask(int taskId)
    {
        try 
        {
            await TaskService.DeleteTaskAsync(taskId);
            await OnInitializedAsync();
            StateHasChanged();
            successMessage = "Task deleted successfully!";
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            Console.WriteLine($"Error deleting task: {ex.Message}");
        }
    }

    private void ToggleEmployee(int employeeId)
    {
        if (selectedEmployeeIds.Contains(employeeId))
            selectedEmployeeIds.Remove(employeeId);
        else
            selectedEmployeeIds.Add(employeeId);
    }

    private void ShowAddTaskForm()
    {
        showAddTaskForm = true;
        StateHasChanged();
    }

    private void ShowEditTaskForm(int taskId)
    {
        selectedTaskId = taskId;
        showEditTaskForm = true;
        StateHasChanged();
    }

    private async Task HandleEditFormClose()
    {
        showEditTaskForm = false;
        await OnInitializedAsync(); // Refresh the task list
        StateHasChanged();
    }
}