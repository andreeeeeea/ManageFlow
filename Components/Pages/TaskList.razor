@page "/tasks"
@using ManageFlow.Data.Models
@using ManageFlow.Services
@inject ITaskManagerService TaskService
@inject IEmployeeService EmployeeService
@rendermode InteractiveServer

<h3>Tasks</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}
@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success" role="alert">
        @successMessage
    </div>
}

@if (editingTask != null)
{
    <div class="card">
        <div class="card-body">
            <h4>Edit Task</h4>
            <EditForm Model="@editingTask" OnValidSubmit="@SaveTask">
                <div class="mb-3">
                    <label for="title">Title</label>
                    <InputText id="title" @bind-Value="editingTask.Title" class="form-control" />
                </div>

                <div class="mb-3">
                    <label for="description">Description</label>
                    <InputText id="description" @bind-Value="editingTask.Description" class="form-control" />
                </div>

                <div class="mb-3">
                    <label for="status">Status</label>
                    <InputSelect id="status" @bind-Value="editingTask.Status" class="form-control">
                        <option value="Just Started">Just Started</option>
                        <option value="In Progress">In Progress</option>
                        <option value="Completed">Completed</option>
                    </InputSelect>
                </div>

                <div class="mb-3">
                    <label for="deadline">Deadline</label>
                    <InputDate id="deadline" @bind-Value="editingTask.Deadline" class="form-control" />
                </div>

                <div class="mb-3">
                    <label>Assign Employees</label>
                    @if (employees == null)
                    {
                        <p>Loading employees...</p>
                    }
                    else if (!employees.Any())
                    {
                        <p>No employees found</p>
                    }
                    else
                    {
                        <div class="list-group">
                            @foreach (var employee in employees)
                            {
                                <div class="form-check">
                                    <input type="checkbox" 
                                        class="form-check-input" 
                                        id="emp_@employee.Id"
                                        checked="@selectedEmployeeIds.Contains(employee.Id)"
                                        @onchange="@(e => ToggleEmployee(employee.Id))" />
                                    <label class="form-check-label" for="emp_@employee.Id">
                                        @employee.FirstName @employee.LastName - @employee.Department
                                    </label>
                                </div>
                            }
                        </div>
                    }
                </div>

                <button type="submit" class="btn btn-primary">Save Changes</button>
                <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
            </EditForm>
        </div>
    </div>
}

@if (tasks == null)
{
    <p>Loading...</p>
}
else if (!tasks.Any())
{
    <p>No tasks found.</p>
}
else
{
    <div class="table-responsive">
        <table class="table">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Description</th>
                    <th>Status</th>
                    <th>Deadline</th>
                    <th>Assigned Employees</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var task in tasks)
                {
                    <tr>
                        <td>@task.Title</td>
                        <td>@task.Description</td>
                        <td>@task.Status</td>
                        <td>@(task.Deadline?.ToShortDateString() ?? "No deadline")</td>
                        <td>
                            @if (taskAssignments.ContainsKey(task.Id))
                            {
                                @string.Join(", ", taskAssignments[task.Id].Select(e => $"{e.FirstName} {e.LastName}"))
                            }
                            else
                            {
                                <span>No assignments</span>
                            }
                        </td>
                        <button class="btn btn-primary" @onclick="() => EditTask(task.Id)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteTask(task.Id)">Delete</button>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<Tasks>? tasks;
    private List<Employees> employees = new();
    private List<int> selectedEmployeeIds = new();
    private Dictionary<int, List<Employees>> taskAssignments = new();
    private Tasks? editingTask;
    private string? errorMessage;
    private string? successMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            tasks = await TaskService.GetTasksAsync();
            taskAssignments.Clear();

            if (tasks != null && tasks.Any())
            {
                foreach (var task in tasks)
                {
                    var assignments = await TaskService.GetTaskAssignmentsAsync(task.Id);
                    if (assignments?.Any() == true)
                    {
                        var employeeIds = assignments.Select(a => a.EmployeeId).ToList();
                        var assignedEmployees = (await EmployeeService.GetEmployeesAsync())
                            .Where(e => employeeIds.Contains(e.Id))
                            .ToList();
                        
                        taskAssignments[task.Id] = assignedEmployees;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            Console.WriteLine($"Error loading tasks: {ex.Message}");
        }
    }

    private async Task EditTask(int taskId)
    {
        try
        {
            editingTask = tasks?.FirstOrDefault(t => t.Id == taskId);
            
            if (editingTask != null)
            {
                employees = await EmployeeService.GetEmployeesAsync();
                var assignments = await TaskService.GetTaskAssignmentsAsync(taskId);
                selectedEmployeeIds = assignments.Select(a => a.EmployeeId).ToList();
            }
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
            Console.WriteLine($"Error loading task for editing: {e.Message}");
        }
    }

    private async Task SaveTask()
    {
        try
        {
            if (editingTask == null) return;

            await TaskService.UpdateTaskAsync(editingTask);
            await TaskService.AssignEmployeesToTaskAsync(editingTask.Id, selectedEmployeeIds);

            taskAssignments[editingTask.Id] = employees.Where(e => selectedEmployeeIds.Contains(e.Id)).ToList();

            editingTask = null;
            selectedEmployeeIds.Clear();
            await OnInitializedAsync();
            StateHasChanged();
            successMessage = "Task edited successfully!";
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
            Console.WriteLine($"Error saving task: {e.Message}");
        }
    }

    private async Task DeleteTask(int taskId)
    {
        try 
        {
            await TaskService.DeleteTaskAsync(taskId);
            await OnInitializedAsync();
            StateHasChanged();
            successMessage = "Task deleted successfully!";
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            Console.WriteLine($"Error deleting task: {ex.Message}");
        }
    }

    private void CancelEdit()
    {
        editingTask = null;
        selectedEmployeeIds.Clear();
    }

    private void ToggleEmployee(int employeeId)
    {
        if (selectedEmployeeIds.Contains(employeeId))
            selectedEmployeeIds.Remove(employeeId);
        else
            selectedEmployeeIds.Add(employeeId);
    }
}