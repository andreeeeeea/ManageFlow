@page "/signup"
@using Microsoft.AspNetCore.Identity
@using EmployeeManager.Data.Models
@using Microsoft.AspNetCore.Authorization
@using EmployeeManager.Services
@attribute [AllowAnonymous]
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer


<PageTitle>Sign Up</PageTitle>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

<div class="row justify-content-center mt-5">
    <div class="col-md-4">
        <div class="card">
            <div class="card-body">
                <h3 class="text-center">Sign Up</h3>

                <EditForm Model="@signupModel" OnValidSubmit="@HandleSignup" FormName="signupForm">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label>First Name</label>
                        <InputText @bind-Value="signupModel.FirstName" class="form-control" />
                        <ValidationMessage For="@(() => signupModel.FirstName)" />
                    </div>

                    <div class="mb-3">
                        <label>Last Name</label>
                        <InputText @bind-Value="signupModel.LastName" class="form-control" />
                        <ValidationMessage For="@(() => signupModel.LastName)" />
                    </div>

                    <div class="mb-3">
                        <label>Email</label>
                        <InputText @bind-Value="signupModel.Email" class="form-control" />
                        <ValidationMessage For="@(() => signupModel.Email)" />
                    </div>

                    <div class="mb-3">
                        <label>Password</label>
                        <InputText type="password" @bind-Value="signupModel.Password" class="form-control" />
                        <ValidationMessage For="@(() => signupModel.Password)" />
                    </div>

                    <div class="mb-3">
                        <label>Confirm Password</label>
                        <InputText type="password" @bind-Value="signupModel.ConfirmPassword" class="form-control" />
                        <ValidationMessage For="@(() => signupModel.ConfirmPassword)" />
                    </div>

                    <div class="mb-3">
                        <label>Role</label>
                        <InputSelect @bind-Value="signupModel.Role" class="form-select">
                            <option value="Employee">Employee</option>
                            <option value="Manager">Manager</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => signupModel.Role)" />
                    </div>

                    <button type="submit" class="btn btn-primary w-100 mb-2">Sign Up</button>
                    <a href="/login" class="btn btn-outline-secondary w-100">Back to Login</a>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code 
{
    private SignupModel signupModel = new();
    private string? errorMessage;

    private async Task HandleSignup()
    {
        try 
        {
            var result = await AuthService.SignUpAsync(signupModel);
            if (result.Succeeded)
            {
                NavigationManager.NavigateTo("/");
            }
            else 
            {
                errorMessage = "Could not sign up. Please try again";
                Console.WriteLine("Invalid sign up attempt");
            }
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
            Console.WriteLine($"Sign up error: {e.Message}");
        }
    }
}
