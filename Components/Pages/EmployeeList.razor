@page "/employees" 
@using ManageFlow.Data.Models
@using ManageFlow.Services
@using ManageFlow.Components.Forms
@inject IEmployeeService EmployeeService
@rendermode InteractiveServer

<div class="page-header mb-4">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h2 class="page-title">ðŸ‘¥ Employee Directory</h2>
            <p class="text-muted">Manage your team and their information</p>
        </div>
        <button class="btn btn-primary" @onclick="ShowAddEmployeeForm">
            <i class="bi bi-plus-circle"></i> Add New Employee
        </button>
    </div>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}
@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success" role="alert">
        @successMessage
    </div>
}

@if (showAddEmployeeForm)
{
    <AddEmployeeForm OnClose="@(() => showAddEmployeeForm = false)" />
}

@if (showEditEmployeeForm)
{
    <EditEmployeeForm EmployeeId="@editingEmployeeId" OnClose="@HandleEditFormClose" />
}

@if (employees == null)
{
    <div class="text-center py-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2">Loading employees...</p>
    </div>
}
else if (!employees.Any())
{
    <div class="empty-state text-center py-5">
        <h4>No employees found</h4>
        <p class="text-muted">Start by adding your first employee</p>
    </div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Department</th>
                    <th>Position</th>
                    <th>Salary Per Year</th>
                    <th class="text-end">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var employee in employees)
                {
                    <tr>
                        <td>@employee.FirstName @employee.LastName</td>
                        <td>@employee.Email</td>
                        <td>@employee.Department</td>
                        <td>@employee.Position</td>
                        <td>@employee.Salary.ToString("C")</td>
                        <td class="text-end">
                            <button class="btn btn-sm btn-primary me-2" @onclick="() => ShowEditEmployeeForm(employee.Id)">
                                <i class="bi bi-pencil"></i> Edit
                            </button>
                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteEmployee(employee.Id)">
                                <i class="bi bi-trash"></i> Delete
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<Employees> employees = new();
    private string? errorMessage;
    private string? successMessage;
    private int editingEmployeeId;
    private bool showAddEmployeeForm = false;
    private bool showEditEmployeeForm = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            employees = await EmployeeService.GetEmployeesAsync();
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
            Console.WriteLine($"Error loading employees: {e.Message}");
        }
    }
    private async Task DeleteEmployee(int employeeId)
    {
        try 
        {
            await EmployeeService.DeleteEmployeeAsync(employeeId);
            employees = await EmployeeService.GetEmployeesAsync();
            StateHasChanged();
            successMessage = "Employee deleted successfully!";
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
            Console.WriteLine($"Error deleting employee: {e.Message}");
        }
    }

    private void ShowAddEmployeeForm()
    {
        showAddEmployeeForm = true;
        StateHasChanged();
    }

    private void ShowEditEmployeeForm(int employeeId)
    {
        editingEmployeeId = employeeId;
        showEditEmployeeForm = true;
        StateHasChanged();
    }

    private async Task HandleEditFormClose()
    {
        showEditEmployeeForm = false;
        await OnInitializedAsync(); // Refresh the employee list
        StateHasChanged();
    }
}