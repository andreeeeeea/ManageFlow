@page "/employees" 
@using EmployeeManager.Data.Models
@using EmployeeManager.Services
@inject IEmployeeService EmployeeService
@rendermode InteractiveServer

<h3>Employees</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}
@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success" role="alert">
        @successMessage
    </div>
}

@if (editingEmployee != null)
{
    <div class="card">
        <div class="card-body">
            <h4>Edit Employee</h4>
            <EditForm Model="@editingEmployee" OnValidSubmit="@SaveEmployee">
                <div class="mb-3">
                    <label for="firstName">First Name</label>
                    <InputText id="firstName" @bind-Value="editingEmployee.FirstName" class="form-control" />
                </div>
                <div class="mb-3">
                    <label for="lastName">Last Name</label>
                    <InputText id="lastName" @bind-Value="editingEmployee.LastName" class="form-control" />
                </div>
                <div class="mb-3">
                    <label for="department">Department</label>
                    <InputText id="department" @bind-Value="editingEmployee.Department" class="form-control" />
                </div>
                <div class="mb-3">
                    <label for="position">Position</label>
                    <InputText id="position" @bind-Value="editingEmployee.Position" class="form-control" />
                </div>
                <div class="mb-3">
                    <label for="salary">Salary Per Annum</label>
                    <InputNumber id="salary" @bind-Value="editingEmployee.Salary" class="form-control" />
                </div>
                <button type="submit" class="btn btn-primary">Update Employee</button>
                <button type="button" class="btn btn-secondary" @onclick="() => editingEmployee = null">Cancel</button>
            </EditForm>
        </div>
    </div>
}

@if (employees == null)
{
    <p>Loading...</p>
}
else if (!employees.Any())
{
    <p>No employees found.</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Department</th>
                    <th>Position</th>
                    <th>Salary Per Year</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var employee in employees)
                {
                    <tr>
                        <td>@employee.FirstName @employee.LastName</td>
                        <td>@employee.Department</td>
                        <td>@employee.Position</td>
                        <td>@employee.Salary.ToString("C")</td>
                        <button class="btn btn-primary" @onclick="() => EditEmployee(employee.Id)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteEmployee(employee.Id)">Delete</button>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<Employees> employees = new();
    private Employees? editingEmployee;
    private string? errorMessage;
    private string? successMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            employees = await EmployeeService.GetEmployeesAsync();
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
            Console.WriteLine($"Error loading employees: {e.Message}");
        }
    }

    private async Task EditEmployee(int employeeId)
    {
        try 
        {
            employees = await EmployeeService.GetEmployeesAsync();
            editingEmployee = employees.FirstOrDefault(e => e.Id == employeeId);
        }
        catch (Exception e) 
        {
            errorMessage = e.Message;
            Console.WriteLine($"Error editing employee: {e.Message}");
        }
    }

    private async Task SaveEmployee()
    {
        try 
        {
            if (editingEmployee != null) 
            {
                await EmployeeService.UpdateEmployeeAsync(editingEmployee);
                employees = await EmployeeService.GetEmployeesAsync();
                editingEmployee = null;
                StateHasChanged();
                successMessage = "Employee edited successfully!";
            }
        }
        catch (Exception e) 
        {
            errorMessage = e.Message;
            Console.WriteLine($"Error saving employee: {e.Message}");
        }
    }

    private async Task DeleteEmployee(int employeeId)
    {
        try 
        {
            await EmployeeService.DeleteEmployeeAsync(employeeId);
            employees = await EmployeeService.GetEmployeesAsync();
            StateHasChanged();
            successMessage = "Employee deleted successfully!";
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
            Console.WriteLine($"Error deleting employee: {e.Message}");
        }
    }
}