@using ManageFlow.Data.Models
@using ManageFlow.Services

@inject IEmployeeService EmployeeService
@rendermode InteractiveServer

<div class="modal-overlay">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Edit Employee</h3>
                <button type="button" class="btn-close" @onclick="CancelEdit"></button>
            </div>
            <div class="modal-body">
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        @errorMessage
                    </div>
                }
                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="alert alert-success" role="alert">
                        @successMessage
                    </div>
                }
                <EditForm Model="@editingEmployee" OnValidSubmit="@SaveEmployee">
                    <div class="mb-3">
                        <label for="firstName">First Name</label>
                        <InputText id="firstName" @bind-Value="editingEmployee.FirstName" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="lastName">Last Name</label>
                        <InputText id="lastName" @bind-Value="editingEmployee.LastName" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="email">Email</label>
                        <InputText id="email" @bind-Value="editingEmployee.Email" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="department">Department</label>
                        <InputText id="department" @bind-Value="editingEmployee.Department" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="position">Position</label>
                        <InputText id="position" @bind-Value="editingEmployee.Position" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="salary">Salary Per Annum</label>
                        <InputNumber id="salary" @bind-Value="editingEmployee.Salary" class="form-control" />
                    </div>
                    <button type="submit" class="btn btn-primary">Update Employee</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<style>
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .modal-dialog {
        width: 90%;
        max-width: 600px;
        margin: 1.75rem auto;
    }

    .modal-content {
        background-color: white;
        border-radius: 0.3rem;
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        border-bottom: 1px solid #dee2e6;
    }

    .modal-body {
        padding: 1rem;
    }
</style>

@code {
    [Parameter] public int EmployeeId { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    private Employees? editingEmployee;
    private string? errorMessage, successMessage;
    protected override async Task OnInitializedAsync()
    {
        try {
            editingEmployee = await EmployeeService.GetEmployeeByIdAsync(EmployeeId);

            if (editingEmployee == null)
            {
                errorMessage = "Employee not found.";   
            }
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
            Console.WriteLine($"Error loading employee: {e.Message}");
        }
    }

    private async Task SaveEmployee()
    {
        try 
        {
            if (editingEmployee == null) return;
        
            await EmployeeService.UpdateEmployeeAsync(editingEmployee);
            successMessage = "Employee updated successfully!";
            await Task.Delay(1500);
            await OnClose.InvokeAsync();
            
        }
        catch (Exception e) 
        {
            errorMessage = e.Message;
            Console.WriteLine($"Error saving employee: {e.Message}");
        }
    }

    private async Task CancelEdit()
    {
        await OnClose.InvokeAsync();
    }
}