@using ManageFlow.Data.Models
@using ManageFlow.Services
@inject IEmployeeService EmployeeService
@rendermode InteractiveServer

<div class="modal-overlay">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Add New Employee</h3>
                <button type="button" class="btn-close" @onclick="OnClose"></button>
            </div>

            <div class="modal-body">
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        @errorMessage
                    </div>
                }
                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="alert alert-success" role="alert">
                        @successMessage
                    </div>
                }
                <EditForm Model="@employee" OnValidSubmit="@SubmitEmployee">
                    <DataAnnotationsValidator />

                    <div class="mb-3">
                        <label for="firstName" class="form-label">First Name</label>
                        <InputText id="firstName" @bind-Value="employee.FirstName" class="form-control" placeholder="Enter first name" />
                    </div>

                    <div class="mb-3">
                        <label for="lastName" class="form-label">Last Name</label>
                        <InputText id="lastName" @bind-Value="employee.LastName" class="form-control" placeholder="Enter last name" />
                    </div>

                    <div class="mb-3">
                        <label for="email" class="form-label">Email</label>
                        <InputText id="email" @bind-Value="employee.Email" class="form-control" placeholder="employee@example.com" type="email" />
                    </div>

                    <div class="mb-3">
                        <label for="department" class="form-label">Department</label>
                        <InputText id="department" @bind-Value="employee.Department" class="form-control" placeholder="e.g. Engineering, Sales" />
                    </div>

                    <div class="mb-3">
                        <label for="position">Position</label>
                        <InputText id="position" @bind-Value="employee.Position" class="form-control" />
                    </div>

                    <div class="mb-3">
                        <label for="salary">Salary Per Annum</label>
                        <InputNumber id="salary" @bind-Value="employee.Salary" class="form-control" />
                    </div>

                    <button type="submit" class="btn btn-primary">Add Employee</button>
                    <button type="button" class="btn btn-secondary" @onclick="OnClose">Cancel</button>
                </EditForm>          
            </div>
        </div>
    </div>
</div>

<style>
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .modal-dialog {
        width: 90%;
        max-width: 600px;
        margin: 1.75rem auto;
    }

    .modal-content {
        background-color: white;
        border-radius: 0.3rem;
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        border-bottom: 1px solid #dee2e6;
    }

    .modal-body {
        padding: 1rem;
    }
</style>

@code {
    private Employees employee = new();
    private string? errorMessage;
    private string? successMessage;
    [Parameter] public EventCallback OnClose { get; set;}

    private async Task SubmitEmployee()
    {
        try 
        {
            var newEmployee = await EmployeeService.CreateEmployeeAsync(employee);
            if (newEmployee != null)
            {
                Console.WriteLine($"Created employee: {newEmployee.FirstName} {newEmployee.LastName}");
                employee = new();
                successMessage = "Employee created successfully!";
                await Task.Delay(1500);
                await OnClose.InvokeAsync();
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            Console.WriteLine($"Error creating employee: {ex.Message}");
        }
    }
}