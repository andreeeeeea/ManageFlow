@using ManageFlow.Data.Models
@using ManageFlow.Services

@inject ITaskManagerService TaskService
@inject IEmployeeService EmployeeService
@rendermode InteractiveServer

<div class="modal-overlay">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Edit Task</h3>
                <button type="button" class="btn-close" @onclick="CancelEdit"></button>
            </div>

            <div class="modal-body">
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        @errorMessage
                    </div>
                }
                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="alert alert-success" role="alert">
                        @successMessage
                    </div>
                }

                <EditForm Model="@editingTask" OnValidSubmit="@SaveTask">
                    <div class="mb-3">
                        <label for="title">Title</label>
                        <InputText id="title" @bind-Value="editingTask.Title" class="form-control" />
                    </div>

                    <div class="mb-3">
                        <label for="description">Description</label>
                        <InputText id="description" @bind-Value="editingTask.Description" class="form-control" />
                    </div>

                    <div class="mb-3">
                        <label for="status">Status</label>
                        <InputSelect id="status" @bind-Value="editingTask.Status" class="form-control">
                            <option value="Just Started">Just Started</option>
                            <option value="In Progress">In Progress</option>
                            <option value="Completed">Completed</option>
                        </InputSelect>
                    </div>

                    <div class="mb-3">
                        <label for="deadline">Deadline</label>
                        <InputDate id="deadline" @bind-Value="editingTask.Deadline" class="form-control" />
                    </div>

                    <div class="mb-3">
                        <label>Assign Employees</label>
                        @if (employees == null)
                        {
                            <p>Loading employees...</p>
                        }
                        else if (!employees.Any())
                        {
                            <p>No employees found</p>
                        }
                        else
                        {
                            <div class="list-group">
                                @foreach (var employee in employees)
                                {
                                    <div class="form-check">
                                        <input type="checkbox" 
                                            class="form-check-input" 
                                            id="emp_@employee.Id"
                                            checked="@selectedEmployeeIds.Contains(employee.Id)"
                                            @onchange="@(() => ToggleEmployee(employee.Id))" />
                                        <label class="form-check-label" for="emp_@employee.Id">
                                            @employee.FirstName @employee.LastName - @employee.Department
                                        </label>
                                    </div>
                                }
                            </div>
                        }
                    </div>

                    <button type="submit" class="btn btn-primary">Save Changes</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<style>
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .modal-dialog {
        width: 90%;
        max-width: 600px;
        margin: 1.75rem auto;
    }

    .modal-content {
        background-color: white;
        border-radius: 0.3rem;
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        border-bottom: 1px solid #dee2e6;
    }

    .modal-body {
        padding: 1rem;
    }
</style>

@code {
    [Parameter] public int TaskId { get; set;}
    [Parameter] public EventCallback OnClose { get; set;}
    private Tasks? editingTask;
    private List<Employees>? employees = new();
    private List<int>? selectedEmployeeIds = new();
    private string? errorMessage, successMessage;

    protected override async Task OnInitializedAsync()
    {
        try {
            editingTask = await TaskService.GetTaskByIdAsync(TaskId);

            if (editingTask != null)
            {
                employees = await EmployeeService.GetEmployeesAsync();
                selectedEmployeeIds = editingTask.TaskAssignments?.Select(ta => ta.EmployeeId).ToList() ?? new();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading task: {ex.Message}";
        }
    }
    
    private async Task SaveTask()
    {
        try
        {
            if (editingTask == null) return;

            await TaskService.UpdateTaskAsync(editingTask);
            await TaskService.AssignEmployeesToTaskAsync(editingTask.Id, selectedEmployeeIds);

            successMessage = "Task updated successfully!";
            await Task.Delay(1500); 
            await OnClose.InvokeAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving task: {ex.Message}";
            Console.WriteLine($"Error saving task: {ex.Message}");
        }
    }
    private void ToggleEmployee(int employeeId)
    {
        if (selectedEmployeeIds.Contains(employeeId))
            selectedEmployeeIds.Remove(employeeId);
        else
            selectedEmployeeIds.Add(employeeId);
    }
    private async Task CancelEdit()
    {
        await OnClose.InvokeAsync();
    }
}